<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="16" passed="16">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="40052" started-at="2019-06-02T14:46:28Z" finished-at="2019-06-02T14:47:08Z">
    <groups>
      <group name="Workflow">
        <method signature="CompleteTesting.addWorflow()[pri:2, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="addWorflow" class="FormBuilderTest.CompleteTesting"/>
        <method signature="CompleteTesting.MapWorkflow()[pri:4, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="MapWorkflow" class="FormBuilderTest.CompleteTesting"/>
        <method signature="CompleteTesting.UpdateWorkflow()[pri:3, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="UpdateWorkflow" class="FormBuilderTest.CompleteTesting"/>
        <method signature="CompleteTesting.addExistingScreens()[pri:6, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="addExistingScreens" class="FormBuilderTest.CompleteTesting"/>
        <method signature="CompleteTesting.getExistingScreen()[pri:5, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getExistingScreen" class="FormBuilderTest.CompleteTesting"/>
        <method signature="CompleteTesting.getWorkflows()[pri:1, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getWorkflows" class="FormBuilderTest.CompleteTesting"/>
        <method signature="CompleteTesting.removeExistingSCresn()[pri:7, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="removeExistingSCresn" class="FormBuilderTest.CompleteTesting"/>
      </group> <!-- Workflow -->
      <group name="Screens">
        <method signature="CompleteTesting.AddCustomScreens()[pri:9, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="AddCustomScreens" class="FormBuilderTest.CompleteTesting"/>
        <method signature="CompleteTesting.MapScreensWithWorkflows()[pri:11, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="MapScreensWithWorkflows" class="FormBuilderTest.CompleteTesting"/>
        <method signature="CompleteTesting.deleteScreens()[pri:14, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="deleteScreens" class="FormBuilderTest.CompleteTesting"/>
        <method signature="CompleteTesting.deleteWorkFlow()[pri:16, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="deleteWorkFlow" class="FormBuilderTest.CompleteTesting"/>
        <method signature="CompleteTesting.getScreens()[pri:8, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getScreens" class="FormBuilderTest.CompleteTesting"/>
        <method signature="CompleteTesting.removeMappingScreenWf()[pri:13, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="removeMappingScreenWf" class="FormBuilderTest.CompleteTesting"/>
        <method signature="CompleteTesting.removeVenueWFMapping()[pri:15, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="removeVenueWFMapping" class="FormBuilderTest.CompleteTesting"/>
        <method signature="CompleteTesting.updateCustomScreens()[pri:10, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="updateCustomScreens" class="FormBuilderTest.CompleteTesting"/>
        <method signature="CompleteTesting.deleteFormFields()[pri:12, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="deleteFormFields" class="FormBuilderTest.CompleteTesting"/>
      </group> <!-- Screens -->
    </groups>
    <test name="Default test" duration-ms="40052" started-at="2019-06-02T14:46:28Z" finished-at="2019-06-02T14:47:08Z">
      <class name="FormBuilderTest.CompleteTesting">
        <test-method status="PASS" signature="startReport()[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="startReport" is-config="true" duration-ms="407" started-at="2019-06-02T20:16:28Z" finished-at="2019-06-02T20:16:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startReport -->
        <test-method status="PASS" signature="register(java.lang.reflect.Method)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="register" is-config="true" duration-ms="16" started-at="2019-06-02T20:16:28Z" finished-at="2019-06-02T20:16:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void FormBuilderTest.CompleteTesting.getWorkflows()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="getWorkflows()[pri:1, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getWorkflows" duration-ms="10191" started-at="2019-06-02T20:16:28Z" description="Getting WorkFlows" finished-at="2019-06-02T20:16:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getWorkflows -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getResult" is-config="true" duration-ms="16" started-at="2019-06-02T20:16:38Z" finished-at="2019-06-02T20:16:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getWorkflows status=SUCCESS method=CompleteTesting.getWorkflows()[pri:1, instance:FormBuilderTest.CompleteTesting@13deb50e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="register(java.lang.reflect.Method)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="register" is-config="true" duration-ms="0" started-at="2019-06-02T20:16:38Z" finished-at="2019-06-02T20:16:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void FormBuilderTest.CompleteTesting.addWorflow()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="addWorflow()[pri:2, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="addWorflow" duration-ms="3784" started-at="2019-06-02T20:16:38Z" description="Add Workflows" finished-at="2019-06-02T20:16:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addWorflow -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getResult" is-config="true" duration-ms="0" started-at="2019-06-02T20:16:42Z" finished-at="2019-06-02T20:16:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addWorflow status=SUCCESS method=CompleteTesting.addWorflow()[pri:2, instance:FormBuilderTest.CompleteTesting@13deb50e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="register(java.lang.reflect.Method)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="register" is-config="true" duration-ms="0" started-at="2019-06-02T20:16:42Z" finished-at="2019-06-02T20:16:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void FormBuilderTest.CompleteTesting.UpdateWorkflow()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="UpdateWorkflow()[pri:3, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="UpdateWorkflow" duration-ms="1604" started-at="2019-06-02T20:16:42Z" description="Update Workflows" depends-on-methods="FormBuilderTest.CompleteTesting.addWorflow" finished-at="2019-06-02T20:16:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UpdateWorkflow -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getResult" is-config="true" duration-ms="2" started-at="2019-06-02T20:16:44Z" finished-at="2019-06-02T20:16:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UpdateWorkflow status=SUCCESS method=CompleteTesting.UpdateWorkflow()[pri:3, instance:FormBuilderTest.CompleteTesting@13deb50e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="register(java.lang.reflect.Method)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="register" is-config="true" duration-ms="1" started-at="2019-06-02T20:16:44Z" finished-at="2019-06-02T20:16:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void FormBuilderTest.CompleteTesting.MapWorkflow()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="MapWorkflow()[pri:4, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="MapWorkflow" duration-ms="1572" started-at="2019-06-02T20:16:44Z" description="Mapping workflow with venue" depends-on-methods="FormBuilderTest.CompleteTesting.addWorflow" finished-at="2019-06-02T20:16:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MapWorkflow -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getResult" is-config="true" duration-ms="0" started-at="2019-06-02T20:16:45Z" finished-at="2019-06-02T20:16:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=MapWorkflow status=SUCCESS method=CompleteTesting.MapWorkflow()[pri:4, instance:FormBuilderTest.CompleteTesting@13deb50e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="register(java.lang.reflect.Method)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="register" is-config="true" duration-ms="1" started-at="2019-06-02T20:16:45Z" finished-at="2019-06-02T20:16:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void FormBuilderTest.CompleteTesting.getExistingScreen()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="getExistingScreen()[pri:5, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getExistingScreen" duration-ms="1649" started-at="2019-06-02T20:16:45Z" description="Getting Existing screens of a workflow" depends-on-methods="FormBuilderTest.CompleteTesting.addWorflow" finished-at="2019-06-02T20:16:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getExistingScreen -->
        <test-method status="PASS" signature="addExistingScreens()[pri:6, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="addExistingScreens" duration-ms="1655" started-at="2019-06-02T20:16:47Z" description="Mapping Existing screens with a workflow" depends-on-methods="FormBuilderTest.CompleteTesting.addWorflow" finished-at="2019-06-02T20:16:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- addExistingScreens -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getResult" is-config="true" duration-ms="0" started-at="2019-06-02T20:16:47Z" finished-at="2019-06-02T20:16:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getExistingScreen status=SUCCESS method=CompleteTesting.getExistingScreen()[pri:5, instance:FormBuilderTest.CompleteTesting@13deb50e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="register(java.lang.reflect.Method)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="register" is-config="true" duration-ms="0" started-at="2019-06-02T20:16:47Z" finished-at="2019-06-02T20:16:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void FormBuilderTest.CompleteTesting.addExistingScreens()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getResult" is-config="true" duration-ms="8" started-at="2019-06-02T20:16:49Z" finished-at="2019-06-02T20:16:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=addExistingScreens status=SUCCESS method=CompleteTesting.addExistingScreens()[pri:6, instance:FormBuilderTest.CompleteTesting@13deb50e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="register(java.lang.reflect.Method)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="register" is-config="true" duration-ms="0" started-at="2019-06-02T20:16:49Z" finished-at="2019-06-02T20:16:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void FormBuilderTest.CompleteTesting.removeExistingSCresn()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="removeExistingSCresn()[pri:7, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="removeExistingSCresn" duration-ms="1624" started-at="2019-06-02T20:16:49Z" description="removing mapping of Existing screens" depends-on-methods="FormBuilderTest.CompleteTesting.addExistingScreens" finished-at="2019-06-02T20:16:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- removeExistingSCresn -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getResult" is-config="true" duration-ms="0" started-at="2019-06-02T20:16:50Z" finished-at="2019-06-02T20:16:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=removeExistingSCresn status=SUCCESS method=CompleteTesting.removeExistingSCresn()[pri:7, instance:FormBuilderTest.CompleteTesting@13deb50e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="getScreens()[pri:8, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getScreens" duration-ms="2075" started-at="2019-06-02T20:16:50Z" description="GetAll Screens" finished-at="2019-06-02T20:16:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getScreens -->
        <test-method status="PASS" signature="register(java.lang.reflect.Method)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="register" is-config="true" duration-ms="0" started-at="2019-06-02T20:16:50Z" finished-at="2019-06-02T20:16:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void FormBuilderTest.CompleteTesting.getScreens()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getResult" is-config="true" duration-ms="21" started-at="2019-06-02T20:16:52Z" finished-at="2019-06-02T20:16:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getScreens status=SUCCESS method=CompleteTesting.getScreens()[pri:8, instance:FormBuilderTest.CompleteTesting@13deb50e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="AddCustomScreens()[pri:9, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="AddCustomScreens" duration-ms="3522" started-at="2019-06-02T20:16:52Z" description="Adding Custom Screens" finished-at="2019-06-02T20:16:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddCustomScreens -->
        <test-method status="PASS" signature="register(java.lang.reflect.Method)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="register" is-config="true" duration-ms="0" started-at="2019-06-02T20:16:52Z" finished-at="2019-06-02T20:16:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void FormBuilderTest.CompleteTesting.AddCustomScreens()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getResult" is-config="true" duration-ms="2" started-at="2019-06-02T20:16:56Z" finished-at="2019-06-02T20:16:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddCustomScreens status=SUCCESS method=CompleteTesting.AddCustomScreens()[pri:9, instance:FormBuilderTest.CompleteTesting@13deb50e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="register(java.lang.reflect.Method)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="register" is-config="true" duration-ms="1" started-at="2019-06-02T20:16:56Z" finished-at="2019-06-02T20:16:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void FormBuilderTest.CompleteTesting.updateCustomScreens()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="updateCustomScreens()[pri:10, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="updateCustomScreens" duration-ms="1625" started-at="2019-06-02T20:16:56Z" description="Updating Custom Screens(Adding form fileds in custom as screen)" depends-on-methods="FormBuilderTest.CompleteTesting.AddCustomScreens" finished-at="2019-06-02T20:16:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateCustomScreens -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getResult" is-config="true" duration-ms="0" started-at="2019-06-02T20:16:58Z" finished-at="2019-06-02T20:16:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=updateCustomScreens status=SUCCESS method=CompleteTesting.updateCustomScreens()[pri:10, instance:FormBuilderTest.CompleteTesting@13deb50e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="register(java.lang.reflect.Method)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="register" is-config="true" duration-ms="0" started-at="2019-06-02T20:16:58Z" finished-at="2019-06-02T20:16:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void FormBuilderTest.CompleteTesting.MapScreensWithWorkflows()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="MapScreensWithWorkflows()[pri:11, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="MapScreensWithWorkflows" duration-ms="1644" started-at="2019-06-02T20:16:58Z" description="Mapping Custom Screens with workflow" depends-on-methods="FormBuilderTest.CompleteTesting.AddCustomScreens, FormBuilderTest.CompleteTesting.addWorflow" finished-at="2019-06-02T20:16:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MapScreensWithWorkflows -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getResult" is-config="true" duration-ms="2" started-at="2019-06-02T20:16:59Z" finished-at="2019-06-02T20:16:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=MapScreensWithWorkflows status=SUCCESS method=CompleteTesting.MapScreensWithWorkflows()[pri:11, instance:FormBuilderTest.CompleteTesting@13deb50e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="register(java.lang.reflect.Method)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="register" is-config="true" duration-ms="0" started-at="2019-06-02T20:16:59Z" finished-at="2019-06-02T20:16:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void FormBuilderTest.CompleteTesting.deleteFormFields()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="deleteFormFields()[pri:12, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="deleteFormFields" duration-ms="1592" started-at="2019-06-02T20:16:59Z" description="Delete form fields from custom Screens" depends-on-methods="FormBuilderTest.CompleteTesting.updateCustomScreens" finished-at="2019-06-02T20:17:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteFormFields -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getResult" is-config="true" duration-ms="16" started-at="2019-06-02T20:17:01Z" finished-at="2019-06-02T20:17:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=deleteFormFields status=SUCCESS method=CompleteTesting.deleteFormFields()[pri:12, instance:FormBuilderTest.CompleteTesting@13deb50e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="register(java.lang.reflect.Method)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="register" is-config="true" duration-ms="0" started-at="2019-06-02T20:17:01Z" finished-at="2019-06-02T20:17:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void FormBuilderTest.CompleteTesting.removeMappingScreenWf()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="removeMappingScreenWf()[pri:13, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="removeMappingScreenWf" duration-ms="1588" started-at="2019-06-02T20:17:01Z" description="Remove mapping of workflow and custom screen" depends-on-methods="FormBuilderTest.CompleteTesting.MapScreensWithWorkflows" finished-at="2019-06-02T20:17:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- removeMappingScreenWf -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getResult" is-config="true" duration-ms="3" started-at="2019-06-02T20:17:02Z" finished-at="2019-06-02T20:17:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=removeMappingScreenWf status=SUCCESS method=CompleteTesting.removeMappingScreenWf()[pri:13, instance:FormBuilderTest.CompleteTesting@13deb50e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="register(java.lang.reflect.Method)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="register" is-config="true" duration-ms="0" started-at="2019-06-02T20:17:02Z" finished-at="2019-06-02T20:17:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void FormBuilderTest.CompleteTesting.deleteScreens()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="deleteScreens()[pri:14, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="deleteScreens" duration-ms="1547" started-at="2019-06-02T20:17:02Z" description="deleting custom screen" depends-on-methods="FormBuilderTest.CompleteTesting.AddCustomScreens" finished-at="2019-06-02T20:17:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteScreens -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getResult" is-config="true" duration-ms="1" started-at="2019-06-02T20:17:04Z" finished-at="2019-06-02T20:17:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=deleteScreens status=SUCCESS method=CompleteTesting.deleteScreens()[pri:14, instance:FormBuilderTest.CompleteTesting@13deb50e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="removeVenueWFMapping()[pri:15, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="removeVenueWFMapping" duration-ms="1549" started-at="2019-06-02T20:17:04Z" description="remove mapping of workflow and mapping" depends-on-methods="FormBuilderTest.CompleteTesting.MapWorkflow" finished-at="2019-06-02T20:17:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- removeVenueWFMapping -->
        <test-method status="PASS" signature="register(java.lang.reflect.Method)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="register" is-config="true" duration-ms="0" started-at="2019-06-02T20:17:04Z" finished-at="2019-06-02T20:17:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void FormBuilderTest.CompleteTesting.removeVenueWFMapping()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getResult" is-config="true" duration-ms="1" started-at="2019-06-02T20:17:06Z" finished-at="2019-06-02T20:17:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=removeVenueWFMapping status=SUCCESS method=CompleteTesting.removeVenueWFMapping()[pri:15, instance:FormBuilderTest.CompleteTesting@13deb50e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="register(java.lang.reflect.Method)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="register" is-config="true" duration-ms="1" started-at="2019-06-02T20:17:06Z" finished-at="2019-06-02T20:17:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void FormBuilderTest.CompleteTesting.deleteWorkFlow()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register -->
        <test-method status="PASS" signature="deleteWorkFlow()[pri:16, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="deleteWorkFlow" duration-ms="1523" started-at="2019-06-02T20:17:06Z" description="Deleting WorkFlow" depends-on-methods="FormBuilderTest.CompleteTesting.addWorflow" finished-at="2019-06-02T20:17:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteWorkFlow -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="getResult" is-config="true" duration-ms="3" started-at="2019-06-02T20:17:07Z" finished-at="2019-06-02T20:17:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=deleteWorkFlow status=SUCCESS method=CompleteTesting.deleteWorkFlow()[pri:16, instance:FormBuilderTest.CompleteTesting@13deb50e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="flushing()[pri:0, instance:FormBuilderTest.CompleteTesting@13deb50e]" name="flushing" is-config="true" duration-ms="707" started-at="2019-06-02T20:17:07Z" finished-at="2019-06-02T20:17:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- flushing -->
      </class> <!-- FormBuilderTest.CompleteTesting -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
